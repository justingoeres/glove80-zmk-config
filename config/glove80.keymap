
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

/* comment to trigger keymap-drawing  */

#include <behaviors.dtsi>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define LAYER_Base    0
#define LAYER_Lower   1
#define LAYER_Magic   2
#define LAYER_Gaming  3
#define LAYER_Cursor  4
#define LAYER_MissionControl 5
#define LAYER_Factory 6

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

////////////////////////////////////////////////////////
//    Layer switch with RGB is disabled because an    //
//    upstream ZMK bug means RGBs in macros only      //
//    light up the left (main) side of the keyboard   //
////////////////////////////////////////////////////////
/*        
        to_layer_4_rgb_on: to_layer_4_rgb_on {
            label = "TO_LAYER_4_RGB_ON";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_TOG>,
                  <&to 4>;
        };

        to_layer_0_rgb_off: to_layer_0_rgb_off {
            label = "TO_LAYER_0_RGB_OFF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_OFF>,
                  <&to 0>;
        };
*/
        ZMK_MACRO(Qu,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &kp Q>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp U>
                ;
        )

        ZMK_MACRO(caps_macro,
            tap-ms = <200>;
            bindings = <&kp CAPS>;
        )
    
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER_Magic_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
//////////////////////////////////////////////////////////////////////
// IMPORTANT: You need to set Firmware Version to "pr16.zephyr-3-2" //
// or any other newer ZMK 3.2 based firmware (such as PR18 or PR19) //
// under Settings > Advanced Settings in the Glove80 Layout Editor! //
//////////////////////////////////////////////////////////////////////
//
// Justin's version of...
//   Sunaku's Layout v21 
// mostly to steal the home-row-mods
//
// https://sunaku.github.io/moergo-glove80-keyboard.html
// https://discord.com/channels/877392805654306816/1111469812850380831
//

behaviors {

    //
    // Miryoku home row mods and thumb layer keys
    // https://sunaku.github.io/home-row-mods.html
    // https://github.com/urob/zmk-config#timeless-homerow-mods
    //
    // TYPING_STREAK_TERM defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #define TYPING_STREAK_TERM 80 // global-quick-tap-ms
    //
    // KEY_REPEATING_TERM defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #define KEY_REPEATING_TERM 300 // "tap then hold" for key auto-repeat
    //
    // HOMEY_TAPPING_TERM defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap for home row mods already
    // provides instant modifier activation for keyboard-only usage, so this
    // setting is meant for combined keyboard/mouse usage such as mod-clicks.
    //
    #define HOMEY_TAPPING_TERM 280 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
    //
    // INDEX_TAPPING_TERM defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // allows faster activation of the Shift modifier (without having to wait
    // for the modified key to be released as the "balanced" flavor requires).
    // Typing streaks and the `hold-trigger-on-release` setting are disabled
    // for the index fingers so as not to hinder their speed and dexterity.
    //
    // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
    // fingers toward the index fingers when activating multiple modifiers
    // because `hold-trigger-on-release` is disabled for the index fingers.
    // Otherwise, you may be surprised that the index fingers' modifier is
    // sent immediately without the rest of your multi-mod chord when you
    // perform outward rolls from your index fingers toward your pinkies.
    //
    #define INDEX_TAPPING_TERM 180
    //
    // THUMB_TAPPING_TERM defines how long you need to hold (milliseconds)
    // a thumb key to activate a layer.  Shorter holds are treated as taps.
    //
    #define THUMB_TAPPING_TERM 200
    
    //
    // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the thumbs (which are assigned to 6 layers in the Miryoku system).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
    // activation for the symbol layer (if the tapped symbol key is released
    // while the thumb layer key is still held down) for quicker programming.
    //
    #define THUMB_HOLDING_TYPE "balanced"

    //
    // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
    // a thumb key to activate a layer.  Shorter holds are treated as taps.
    //
    #define THUMB_HOLDING_TIME 200

    //
    // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

    //
    // Glove80 key positions index for positional hold-tap
    // https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define RIGHT_HAND_KEYS     \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72
    

    #define LINGER_KEYS_TAP_TERM 170
    
    //
    // Home row mod-tap keys for all except index fingers
    //
    homey_left: miryoku_home_row_mods_left_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_HAND";
        flavor = "balanced";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_TAPPING_TERM>;
        quick-tap-ms = <TYPING_STREAK_TERM>;
        global-quick-tap; // with typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    homey_right: miryoku_home_row_mods_right_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_HAND";
        flavor = "balanced";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_TAPPING_TERM>;
        quick-tap-ms = <TYPING_STREAK_TERM>;
        global-quick-tap; // with typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    //
    // Special home row mod-tap keys for the index fingers
    //
    index_left: miryoku_home_row_mods_left_index_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_INDEX_SHIFT";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <INDEX_TAPPING_TERM>;
        quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
        //global-quick-tap; // no typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    index_right: miryoku_home_row_mods_right_index_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_INDEX_SHIFT";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <INDEX_TAPPING_TERM>;
        quick-tap-ms = <KEY_REPEATING_TERM>; // enable repeat
        //global-quick-tap; // no typing streak
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    //
    // Thumb cluster hold-tap keys for Miryoku layers
    //
    thumb: miryoku_thumb_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "MIRYOKU_THUMB_LAYER";
        flavor = THUMB_HOLDING_TYPE; // balanced
        tapping-term-ms = <THUMB_HOLDING_TIME>; // 200
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat / 300
        //global-quick-tap; // no typing streak
        //retro-tap; // don't allow slow (hold-like) taps
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };

    //
    // Thumb cluster hold-tap keys for Miryoku layers
    // Special version just for use with CAPS
    thumb_caps: miryoku_thumb_layer_caps {
        compatible = "zmk,behavior-hold-tap";
        label = "MIRYOKU_THUMB_LAYER";
        flavor = THUMB_HOLDING_TYPE; // balanced
        tapping-term-ms = <THUMB_HOLDING_TIME>; // 200
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat / 300
        //global-quick-tap; // no typing streak
        //retro-tap; // don't allow slow (hold-like) taps
        #binding-cells = <2>;
        bindings = <&mo>, <&caps_macro>;
    };


    tap_dance_caps_word: tap_dance_caps_word {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_CAPS_WORD";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&caps_word>, <&kp CAPS>;
    };

    //
    // CapsWord - ported from Pascal Getreuer's extension for QMK
    // https://zmk.dev/docs/behaviors/caps-word
    // https://getreuer.info/posts/keyboards/caps-word/index.html
    //
    behavior_caps_word {
      continue-list = <UNDERSCORE MINUS BACKSPACE DELETE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
    };


    lk_qu: lk_qu {
        compatible = "zmk,behavior-hold-tap";
        label = "lk_qu";
        #binding-cells = <2>;
        tapping-term-ms = <LINGER_KEYS_TAP_TERM>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&Qu>;
    };

    td_cursor: tap_dance_layer_cursor {
    compatible = "zmk,behavior-tap-dance";
    label = "LAYER_TAP_DANCE_CURSOR";
    #binding-cells = <0>;
    tapping-term-ms = <200>;
    bindings = <&mo LAYER_Cursor>, <&to LAYER_Cursor>;
    };

};



};

/* Sunaku's layers */
// #define LAYER_Base 0
// #define LAYER_Lower 1
// #define LAYER_Magic 2
// #define LAYER_Cursor 3
// #define LAYER_Number 4
// #define LAYER_Function 5
// #define LAYER_Symbol 6
// #define LAYER_Mouse 7
// #define LAYER_System 8
// #define LAYER_Gaming 9
// #define LAYER_Typing 10
// #define LAYER_Emoji 11
// #define LAYER_World 12

/* My layers */
// #define LAYER_Base    0
// #define LAYER_Lower   1
// #define LAYER_Magic   2
// #define LAYER_Gaming  3
// #define LAYER_Cursor  4
// #define LAYER_MissionControl 5
// #define LAYER_Factory 6

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <        
    &kp F1                             &kp F2              &kp F3              &kp F4              &kp F5                                                                                                                                                                                                      &kp F6              &kp F7                  &kp F8                  &kp F9                      &kp F10
    &kp EQUAL                          &kp N1              &kp N2              &kp N3              &kp N4              &kp N5                                                                                                                                                                          &kp N6  &kp N7              &kp N8                  &kp N9                  &kp N0                      &kp MINUS
    &kp TAB                            &lk_qu Q U          &kp W               &kp E               &kp R               &kp T                                                                                                                                                                           &kp Y   &kp U               &kp I                   &kp O                   &kp P                       &kp BSLH
    &tap_dance_caps_word               &homey_left LALT A  &homey_left LCTRL S &homey_left LSHFT D &index_left LGUI F  &kp G                                                                                                                                                                           &kp H   &index_right RGUI J &homey_right RSHFT K    &homey_right RCTRL L    &homey_right RALT SEMICOLON &kp SQT
    &kp GRAVE                          &kp Z               &kp X               &kp C               &kp V               &kp B        &homey_left LSHFT ESC   &thumb_caps LAYER_Cursor CAPS   &kp LCTRL                   &mo LAYER_MissionControl   &td_cursor                  &homey_right RSHFT TAB  &kp N   &kp M               &kp COMMA               &kp DOT                 &kp FSLH                    &kp PG_UP
    &magic LAYER_Magic LAYER_Base      &kp HOME            &kp END             &kp LEFT            &kp RIGHT                        &kp BSPC                &kp DEL                         &lower                      &lower                     &kp RET                     &kp SPACE                       &kp UP              &kp DOWN                &kp LBKT                &kp RBKT                    &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
    &kp C_BRI_DN                    &kp C_BRI_UP        &kp C_PREV            &kp C_NEXT          &kp C_PP                                                                                                                                                                                                                     &kp C_MUTE      &kp C_VOL_DN    &kp C_VOL_UP    &none           &kp PAUSE_BREAK
    &trans                          &to 1               &to 2                 &to 3               &to 4                 &to 5                                                                                                                                                                          &kp LEFT_PARENTHESIS    &kp KP_NUM      &kp KP_EQUAL    &kp KP_SLASH    &kp KP_MULTIPLY &kp PRINTSCREEN
    &trans                          &none               &none                 &kp UP_ARROW        &none                 &kp END                                                                                                                                                                        &kp RIGHT_PARENTHESIS   &kp KP_N7       &kp KP_N8       &kp KP_N9       &kp KP_MINUS    &kp SCROLLLOCK
    &trans                          &none               &kp LEFT_ARROW        &kp DOWN_ARROW      &kp RIGHT_ARROW       &kp PG_UP                                                                                                                                                                      &kp PERCENT             &kp KP_N4       &kp KP_N5       &kp KP_N6       &kp KP_PLUS     &none 
    &trans                          &kp K_APP           &none                 &kp F11             &kp F12               &kp PG_DN   &trans                  &tog LAYER_Cursor               &trans                      &tog LAYER_MissionControl  &trans                      &trans                  &kp COMMA               &kp KP_N1       &kp KP_N2       &kp KP_N3       &kp KP_ENTER    &trans
    &magic LAYER_Magic LAYER_Base   &kp CAPS            &kp INS               &kp F11             &kp F12                           &kp DEL                 &trans                          &to LAYER_Base              &to LAYER_Base             &trans                      &kp DEL                                         &kp KP_N0       &kp KP_N0       &kp KP_DOT      &kp KP_ENTER    &trans
            >;
        };

        layer_Magic {
            bindings = <
    &bt BT_CLR  &none            &none            &none            &none                                                                                            &none   &none   &none   &none   &bt BT_CLR_ALL
    &none       &none            &none            &none            &none            &none                                                                           &none   &none   &none   &none   &none           &none 
    &none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none   &none   &none   &none   &none           &none 
    &bootloader &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none   &none   &none   &none   &none           &bootloader
    &sys_reset  &none            &none            &none            &none            &none           &bt_2   &bt_3  &none                    &none   &none   &none   &none   &none   &none   &none   &none           &sys_reset
    &none       &none            &none            &none            &none                            &bt_0   &bt_1  &out OUT_USB             &none   &none   &none           &none   &none   &none   &none           &to LAYER_Factory
            >;
        };

        layer_Gaming {
            bindings = <
    &kp F1                         &kp F2      &kp F3   &kp F4    &kp F5                                                                                                           &kp C_MUTE  &kp C_VOL_DN    &kp C_VOL_UP    &kp F9          &kp F10
    &kp EQUAL                      &kp N1      &kp N2   &kp N3    &kp N4       &kp N5                                                                                      &kp N6  &kp N7      &kp N8          &kp N9          &kp N0          &kp MINUS
    &kp TAB                        &kp Q       &kp W    &kp E     &kp R        &kp T                                                                                       &kp Y   &kp U       &kp I           &kp O           &kp P           &kp BSLH
    &kp ESC                        &kp A       &kp S    &kp D     &kp F        &kp G                                                                                       &kp H   &kp J       &kp K           &kp L           &kp SEMICOLON   &kp SQT
    &kp GRAVE                      &kp Z       &kp X    &kp C     &kp V        &kp B   &kp LSHFT  &kp LCTRL    &kp LGUI               &kp RALT    &kp RCTRL   &kp RSHFT    &kp N   &kp M       &kp COMMA       &kp DOT         &kp FSLH        &kp PG_UP
    &magic LAYER_Magic LAYER_Base  &kp HOME    &kp END  &kp LEFT  &kp RIGHT            &kp BSPC   &kp LALT     &to LAYER_Base         &kp RGUI    &kp RET     &kp SPACE            &kp UP      &kp DOWN        &kp LBKT        &kp RBKT        &kp PG_DN
            >;
        };

        layer_Cursor {
            bindings = <
    &none                         &none    &none       &none       &none                                                                                                      &none              &none           &none               &none    &none
    &none                         &none    &none       &none       &none       &none                                                                             &kp LG(Z)    &kp LA(LEFT_ARROW) &none           &kp LA(RIGHT_ARROW) &none    &none
    &none                         &none    &none       &none       &none       &none                                                                             &kp LG(X)    &kp DEL            &kp UP_ARROW    &kp BSPC            &none    &none
    &none                         &kp LALT &kp LCTRL   &kp LSHFT   &kp LGUI    &none                                                                             &kp LG(C)    &kp LEFT_ARROW     &kp DOWN_ARROW  &kp RIGHT_ARROW     &none    &none
    &none                         &none    &none       &none       &none       &none   &none  &none  &none                &none           &kp RALT &kp RSHFT     &kp LG(V)    &kp HOME           &kp PG_UP       &kp PG_DN           &kp END  &none
    &magic LAYER_Magic LAYER_Base &none    &none       &none       &none               &none  &none  &to LAYER_Base       &to LAYER_Base  &kp RET  &kp SPACE                 &none              &none           &none               &none    &none
            >;
        };

        layer_MissionControl {
            bindings = <
    &none                         &none    &none       &none       &none                                                                                                     &none               &none               &none               &none    &none
    &none                         &none    &none       &none       &none       &none                                                                             &trans      &trans              &none               &trans              &none    &none
    &none                         &none    &none       &none       &none       &none                                                                             &trans      &trans              &kp RC(UP_ARROW)    &trans              &none    &none
    &none                         &kp LALT &kp LCTRL   &kp LSHFT   &kp LGUI    &none                                                                             &trans      &kp RC(LEFT_ARROW)  &kp RC(DOWN_ARROW)  &kp RC(RIGHT_ARROW) &none    &none
    &none                         &none    &none       &none       &none       &none   &none  &none  &none                &none           &kp RALT &kp RSHFT     &trans      &trans              &trans              &trans              &trans  &none
    &magic LAYER_Magic LAYER_Base &none    &none       &none       &none               &none  &none  &to LAYER_Base       &to LAYER_Base  &kp RET  &kp SPACE                 &none               &none               &none               &none    &none
            >;
        };

        layer_Factory {
            bindings = <
    &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_4                                                                                                                       &kp NUMBER_4  &kp NUMBER_8  &kp NUMBER_2  &kp NUMBER_6  &kp NUMBER_0
    &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_3  &kp NUMBER_9  &kp NUMBER_5  &kp NUMBER_0                                                                                           &kp NUMBER_0  &kp NUMBER_5  &kp NUMBER_9  &kp NUMBER_3  &kp NUMBER_7  &kp NUMBER_1
    &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_4  &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_1                                                                                           &kp NUMBER_1  &kp NUMBER_6  &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_8  &kp NUMBER_2
    &kp NUMBER_3  &kp NUMBER_9  &kp NUMBER_5  &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_2                                                                                           &kp NUMBER_2  &kp NUMBER_7  &kp NUMBER_1  &kp NUMBER_5  &kp NUMBER_9  &kp NUMBER_3
    &kp NUMBER_4  &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6       &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_8  &kp NUMBER_2  &kp NUMBER_6  &kp NUMBER_0  &kp NUMBER_4
    &magic LAYER_Magic LAYER_Base  &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_3  &kp NUMBER_9                &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9       &kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7                &kp NUMBER_9  &kp NUMBER_3  &kp NUMBER_7  &kp NUMBER_1  &kp NUMBER_5
            >;
        };

/*        layer_Blank {
            bindings = <
    &none  &none  &none  &none  &none                                                               &none  &none  &none  &none  &none
    &none  &none  &none  &none  &none  &none                                                 &none  &none  &none  &none  &none  &none
    &none  &none  &none  &none  &none  &none                                                 &none  &none  &none  &none  &none  &none
    &none  &none  &none  &none  &none  &none                                                 &none  &none  &none  &none  &none  &none
    &none  &none  &none  &none  &none  &none  &none  &none  &none       &none  &none  &none  &none  &none  &none  &none  &none  &none
    &none  &none  &none  &none  &none         &none  &none  &none       &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
*/
    //     layer_Sunaku_Base {
    //         bindings = <
    // &kp F1        &kp F2                &kp F3               &kp F4               &kp F5                                                                                                                                                                &kp F6                &kp F7                &kp F8               &kp F9                 &kp F10
    // &kp EQUAL     &kp N1                &kp N2               &kp N3               &kp N4                &kp N5                                                                                                                             &kp N6       &kp N7                &kp N8                &kp N9               &kp N0                 &kp BSLH
    // &kp GRAVE     &kp B                 &homey_left RALT Y   &kp O                &kp U                 &kp SQT                                                                                                                            &kp SEMI     &kp L                 &kp D                 &homey_right RALT W  &kp V                  &kp Z
    // &cappy        &homey_left LGUI C    &homey_left LALT I   &homey_left LCTRL E  &index_left LSHFT A   &kp COMMA                                                                                                                          &kp DOT      &index_right LSHFT H  &homey_right LCTRL T  &homey_right LALT S  &homey_right LGUI N    &kp Q
    // &kp LSHFT     &kp G                 &kp X                &kp J                &kp K                 &kp MINUS           &thumb 5 ESC        &kp UP             &kp DOWN              &kp LEFT       &kp RIGHT       &thumb 8 ENTER     &kp FSLH     &kp R                 &kp M                 &kp F                &kp P                  &kp RSHFT
    // &magic 2 0    &kp HOME              &kp PG_UP            &kp PG_DN            &kp END                                   &thumb 3 BACKSPACE  &thumb 4 DELETE    &lower                &lower         &thumb 7 TAB    &thumb 6 SPACE                  &parang_left          &kp LBKT              &kp RBKT             &parang_right          &magic 2 0
    //         >;
    //     };

    };
};
